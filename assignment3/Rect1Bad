import cv2
import numpy as np

def angle_between_lines(line1, line2):
    """Calculate the angle between two lines."""
    x1, y1, x2, y2 = line1[0]
    x3, y3, x4, y4 = line2[0]

    angle1 = np.arctan2(y2 - y1, x2 - x1)
    angle2 = np.arctan2(y4 - y3, x4 - x3)
    return np.abs(np.rad2deg(angle1 - angle2))

def line_intersection(line1, line2):
    """Find the intersection of two lines given in HoughP format."""
    x1, y1, x2, y2 = line1[0]
    x3, y3, x4, y4 = line2[0]

    # Convert lines to the format of y = mx + c
    m1 = (y2 - y1) / float(x2 - x1) if x2 != x1 else float('inf')
    m2 = (y4 - y3) / float(x4 - x3) if x4 != x3 else float('inf')
    c1 = y1 - m1 * x1
    c2 = y3 - m2 * x3

    if m1 == m2:  # Parallel lines
        return None

    # Intersection point
    x = (c2 - c1) / (m1 - m2) if m1 != float('inf') and m2 != float('inf') else x1 if m1 == float('inf') else x3
    y = m1 * x + c1 if m1 != float('inf') else m2 * x + c2

    return (x, y)

# Start video capture
cap = cv2.VideoCapture(0)

if not cap.isOpened():
    print("Error: Webcam not accessible")
    exit()

while True:
    ret, frame = cap.read()
    if not ret:
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray, 50, 150)
    lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=50, minLineLength=50, maxLineGap=10)

    if lines is not None:
        # Sort lines by length and select the top 4
        lines = sorted(lines, key=lambda x: np.linalg.norm((x[0][0]-x[0][2], x[0][1]-x[0][3])), reverse=True)[:4]

        # Draw the longest lines
        for line in lines:
            x1, y1, x2, y2 = line[0]
            cv2.line(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

        # Find intersections with approximately 90Â° angles
        for i in range(len(lines)):
            for j in range(i+1, len(lines)):
                if 80 <= angle_between_lines(lines[i], lines[j]) <= 100:
                    inter = line_intersection(lines[i], lines[j])
                    if inter is not None:
                        cv2.circle(frame, (int(inter[0]), int(inter[1])), 5, (0, 0, 255), -1)

    cv2.imshow('Frame with Detected Lines and Intersections', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
